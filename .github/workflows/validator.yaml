name: Helm Chart Manifests Validator with Kubeconform

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run the workflow on (for specific component validation)"
        required: false
        default: "master"
      component:
        description: "Component to validate (for specific component validation)"
        required: false
      view_gomplate:
        description: "Enable viewing the gomplated file (for specific component validation)"
        required: false
        default: false
        type: boolean
      view_manifest:
        description: "Enable viewing the generated manifest (for specific component validation)"
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
      # Checkout primary repository (codebase under test)
      - name: Checkout primary repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.event.pull_request.head.ref || github.ref_name }}
          fetch-depth: 0

      # Display the checked-out branch
      - name: Display checked-out branch
        run: |
          echo "Checked out branch: ${{ github.event.inputs.branch || github.ref_name }}"

      # Determine values.yaml files based on triggers
      - name: Determine values.yaml files
        if: ${{ github.event.inputs.component }}
        run: |
          echo "Validating component: ${{ github.event.inputs.component }}"
          component_path="qcs/${{ github.event.inputs.component }}/values.yaml"
          echo "VALUES_FILE_PATH=$component_path" >> $GITHUB_ENV

      - name: Get all values.yaml files (for manual trigger)
        if: ${{ github.event_name == 'workflow_dispatch' && !github.event.inputs.component }}
        run: |
          values_files=$(find qcs -type f -name "values.yaml")
          echo "All values files found:"
          echo "$values_files"
          values_files_space_separated=$(echo "$values_files" | tr '\n' ' ')
          echo "VALUES_FILE_PATH=$values_files_space_separated" >> $GITHUB_ENV

      - name: Get changed values.yaml files (for push/pull_request triggers)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        id: changed-values-files-yaml
        uses: tj-actions/changed-files@v41
        with:
          files: 'qcs/*/values.yaml'

      # Set files to an environment variable
      - name: Set files to an environment variable
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Setting files from manual trigger..."
            echo "FILES=${{ env.VALUES_FILE_PATH }}" >> $GITHUB_ENV
          else
            echo "Setting files from changed files..."
            echo "FILES=${{ steps.changed-values-files-yaml.outputs.all_changed_files }}" >> $GITHUB_ENV
          fi

      - name: Display files set in the environment variable
        run: |
          echo "Files set in the environment variable:"
          echo "${{ env.FILES }}"

      # Load exceptions list if available
      - name: Load exceptions list
        id: load-exceptions
        run: |
          if [[ -f "helmchart-validation-exceptions.yaml" ]]; then
            echo "Loading exceptions from helmchart-validation-exceptions.yaml"
            exceptions=$(yq '.exceptions' helmchart-validation-exceptions.yaml | tr '\n' ' ')
          else
            echo "No helmchart-validation-exceptions.yaml file found; proceeding without exceptions."
            exceptions=""
          fi
          echo "exceptions=$exceptions" >> $GITHUB_ENV

      # Install yq for YAML processing
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.2/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      # Install gomplate templating tool
      - name: Install gomplate
        run: |
          mkdir bin
          curl -o bin/gomplate -L "https://github.com/hairyhenderson/gomplate/releases/download/v3.10.0/gomplate_linux-amd64"
          chmod +x bin/gomplate
          echo "${PWD}/bin" >> $GITHUB_PATH

      # Install Helm for Kubernetes chart management
      - name: Install Helm
        uses: azure/setup-helm@v4.1.0
        with:
          version: 'v3.14.3'

      # Install Kubeconform for validating Kubernetes manifests
      - name: Install Kubeconform
        run: |
          curl -L -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform.tar.gz kubeconform
          sudo mv kubeconform /usr/local/bin/
          rm kubeconform.tar.gz

      # Process and validate files
      - name: Process and validate YAML files
        env:
          exceptions: ${{ env.exceptions }}
        run: |
          set +e
          IFS=' ' read -r -a files <<< "${FILES}"
          echo "Processing files: ${files[@]}"
          SCRIPT_BASE=$(pwd)

          skipped_summaries_file="skipped_summaries.txt"
          failed_summaries_file="failed_summaries.txt"
          success_summaries_file="success_summaries.txt"
          : > "$skipped_summaries_file"
          : > "$failed_summaries_file"
          : > "$success_summaries_file"

          total_files=${#files[@]}
          file_count=1

          components=()
          for file in "${files[@]}"; do
            component=$(echo "$file" | awk -F'/' '{print $2}')
            
            echo "Processing file $file_count of $total_files: $file (Component: $component)"
            file_count=$((file_count + 1))

            # Skip components listed in exceptions
            if [[ " $exceptions " =~ " $component " ]]; then
              echo "Skipping component $component as it is in the exceptions list." >> "$skipped_summaries_file"
              continue
            fi

            # Copy all content, including directories and files, from qcs/$component to ${component}-values/qcs/$component
            source_dir="qcs/$component"
            target_dir="${component}-values/qcs/$component"

            if [[ -d "$source_dir" ]]; then
              mkdir -p "$target_dir"
              cp -a "$source_dir/." "$target_dir/"
              echo "All content from $source_dir copied to $target_dir"
            else
              echo "Source directory $source_dir does not exist; skipping."
            fi

            # Add component to unique components list if not already included
            if [[ ! " ${components[*]} " =~ " $component " ]]; then
              components+=("$component")
            fi
          done
          echo "Unique components: ${components[@]}"